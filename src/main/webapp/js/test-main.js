requirejs(['testDiff', "buildSelect"], function(testDiff, buildSelect){
 var builds = buildSelect.getBuilds(window.location.href);
 var build1 = builds.build1;
 var build2 = builds.build2;

 var url1 = testDiff.buildURL(build1, window.location.href);
 var url2 = testDiff.buildURL(build2, window.location.href);
 
 var test1Information = null;
 var test2Information = null;

 var rawInformation1 = null;
 var rawInformation2 = null;

 var autoGenerated1 = null;
 var autoGenerated2 = null;
 
 /*
 * This function adds the event listeners to the table of content items
 * This navigates to the testDiff area to be taken care of.
 */
 function addFilterListener(deepDiff){
  $j('#filterArea input').click(function(e){
   var filter = [];
   if($j('#addedFilter').is(':checked')){
    filter.push("added");
   }

   if($j('#deletedFilter').is(':checked')){
    filter.push("deleted");
   }

   if($j('#newPassFilter').is(':checked')){
    filter.push("pass");
   }

   if($j('#newFailFilter').is(':checked')){
    filter.push("fail");
   }

   var newDeepDiff = testDiff.filter(deepDiff, filter);
   $j('#deepSummaryArea').html(testDiff.buildDeepHTML(newDeepDiff));
   
  });
 };

 /**
 * This function adds the table callbacks for when you click on a test name, it should show the information
 * about that particular test on the bottom of the page
 * 
 * args: testInfo1, testInfo2 - parsedJSON about the tests, b1, b2 - build numbers
 */
 function addTableCallbacks(testInfo1, testInfo2, b1, b2){
  $j('.tableName').click(function(e){
   var target = e.target.innerText;
   var results = testDiff.findTest(target, testInfo1.concat(autoGenerated1), testInfo2.concat(autoGenerated2));
   $j('#test1').html("");
   $j('#test2').html("");
   $j('#test1').append(testDiff.generateSingleTestHTML(results[0], b1));
   $j('#test2').append(testDiff.generateSingleTestHTML(results[1], b2));
  });
 }

 /**
 * This function renders the input into the DOM
 *
 * args: testInfo1, testInfo2 - The parsed information about the tests
 */
 function displayInformation(testInfo1, testInfo2){

  var numericInformation1 = testDiff.getNumericInformation(testInfo1);
  var numericInformation2 = testDiff.getNumericInformation(testInfo2);

  var statistics1 = testDiff.getStatistics(testInfo1.concat(autoGenerated1), build1);
  var statistics2 = testDiff.getStatistics(testInfo2.concat(autoGenerated2), build2);

  var deepDiff = testDiff.getDeepDiff(testInfo1, testInfo2);
  var shallowDiff = testDiff.getShallowDiff(deepDiff);

  $j('#buildA').append(testDiff.buildBaseHTML(testInfo1, build1));
  $j('#buildB').append(testDiff.buildBaseHTML(testInfo2, build2));
  $j('#autoBuildA').append(testDiff.buildBaseHTML(autoGenerated1, build1));
  $j('#autoBuildB').append(testDiff.buildBaseHTML(autoGenerated2, build2));
  $j('#testSummarization').append(testDiff.buildNumericHTML(numericInformation1, numericInformation2, build1, build2));
  $j('#shallowSummarization').append(testDiff.buildShallowHTML(shallowDiff));
  $j('#shallowSummarization').append(testDiff.buildStatisticsHTML(statistics1));
  $j('#shallowSummarization').append(testDiff.buildStatisticsHTML(statistics2));
  $j('#filterArea').append(testDiff.buildFilterArea());
  $j('#deepSummaryArea').html(testDiff.buildDeepHTML(deepDiff));
  
  addTableCallbacks(testInfo1, testInfo2, build1, build2);
  addFilterListener(deepDiff);
 }
 
 /*
  This function alerts the user for errors in getting the builds from Jenkins
 */ 
 function displayError(buildNumber){
  alert("Test Results for Build " + buildNumber + " not available, defaulting to empty tests");
 }
  
 /**
  * This set of functions make a GET request from the Jenkins API and parses the information
  */
 $j.get(url1, function(data){
  test1Information = testDiff.parseJSON(data);
  autoGenerated1 = testDiff.findAutomaticallyGeneratedTests(data)

  $j.get(url2, function(data2){
   test2Information = testDiff.parseJSON(data2); 
   autoGenerated2 = testDiff.findAutomaticallyGeneratedTests(data)
   displayInformation(test1Information, test2Information);
  })

  .fail(function(){
   displayError(build2);
  });
  
 }).fail(function(){
  displayError(build1);
 });
});
